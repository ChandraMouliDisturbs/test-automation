"""Breakup result.xml to send to TestRail."""\n\nimport getopt\nimport operator\nimport os\nimport sys\n\nfrom defusedxml import ElementTree\nfrom functools import reduce\ntry:\n\tfrom staxrail.testrail import TestRailAPI\nexcept ImportError:\n\tfrom testrail import TestRailAPI\n\n\nclass Result(object):\n\t"""Test Result Control."""\n\n\tNEW_LINE = ''.join([chr(10), chr(13)])\n\n\tdef __init__(self, url, path='./', data='result.xml', debug=False):\n\t\t"""Result class constructor."""\n\t\tself.debugging = debug\n\t\tself.file = ''.join([path, '/', data])\n\t\tself.run_id = os.getenv('RUNID')\n\t\tself.tree, self.root = self.get_tree()\n\t\tself.test_rail = TestRailAPI(url=url)\n\t\tself.test_set = self.test_rail.get_tests(run_id=int(self.run_id))\n\n\t@classmethod\n\tdef prod(cls, vals):\n\t\t"""Non operator multiplier."""\n\t\treturn reduce(operator.mul, vals, 1)\n\n\tdef get_tree(self):\n\t\t"""Return the tree and the tree root."""\n\t\ttree = ElementTree.parse(self.file)\n\t\treturn tree, tree.getroot()\n\n\tdef find_test_id(self, case_id, tests):\n\t\t"""Return a test ID."""\n\t\ttry:\n\t\t\tcase = int(case_id)\n\t\texcept ValueError:\n\t\t\tlist_tests = []\n\t\t\tfor val in tests:\n\t\t\t\tlist_tests.append(val['case_id'])\n\t\t\tprint(\n\t\t\t\t'Case "%s" is not a valid case ID in %s.' %\n\t\t\t\t(case_id, list_tests.sort())\n\t\t\t)\n\t\t\treturn -1\n\t\tfor test in tests:\n\t\t\tif case == test['case_id']:\n\t\t\t\treturn test['id']\n\t\treturn -1\n\n\tdef get_status(self, string):\n\t\t"""Return test status."""\n\t\tif string == 'passed':\n\t\t\treturn TestRailAPI.PASSED\n\t\telif string == 'failure':\n\t\t\treturn TestRailAPI.FAILED\n\t\treturn TestRailAPI.UNTESTED\n\n\tdef get_time_string(self, time):\n\t\t"""Return the time string."""\n\t\tto_string = ''\n\t\tnew_time = int(float(time))\n\t\tif new_time <= 0:\n\t\t\treturn '1s'\n\t\thours = int(new_time / 3600)\n\t\tnew_time = new_time - Result.prod([hours, 3600])\n\t\tminutes = int(new_time / 60)\n\t\tnew_time = new_time - Result.prod([minutes, 60])\n\t\tseconds = int(new_time)\n\t\tif hours > 0:\n\t\t\tto_string += '%sh ' % hours\n\t\t\tif minutes == 0 and seconds == 0:\n\t\t\t\treturn to_string[:-1]\n\t\tif minutes > 0:\n\t\t\tto_string += '%sm ' % minutes\n\t\t\tif seconds == 0:\n\t\t\t\treturn to_string[:-1]\n\t\treturn to_string + '%ss' % seconds\n\n\tdef retrieve_test_results(self):\n\t\t"""Split the tree."""\n\t\tfor child in self.root:\n\t\t\tchild.set(\n\t\t\t\t'case',\n\t\t\t\tchild.get('name').split('_')[-1]\n\t\t\t)\n\t\t\tchild.set(\n\t\t\t\t'test',\n\t\t\t\tself.find_test_id(child.get('case'), self.test_set)\n\t\t\t)\n\t\t\tsub = list(child.iter())\n\t\t\tif len(sub) >= 2:\n\t\t\t\tchild.set('status', sub[1].tag)\n\t\t\t\tmessage = sub[1].get('message') if 'message' in \\\n\t\t\t\t\tsub[1].attrib else ''\n\t\t\t\tparts = message.split(\n\t\t\t\t\t'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ' +\n\t\t\t\t\t'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _'\n\t\t\t\t)\n\t\t\t\treorder = 'Break Point:' + Result.NEW_LINE + \\\n\t\t\t\t\t\t  parts[0] + Result.NEW_LINE\n\t\t\t\tif len(parts) > 1:\n\t\t\t\t\tfinal = str(parts[len(parts) - 1])\n\t\t\t\t\treorder = reorder + Result.NEW_LINE + \\\n\t\t\t\t\t\t'Reason:' + Result.NEW_LINE\n\t\t\t\t\treorder = reorder + \\\n\t\t\t\t\t\tfinal[:-operator.floordiv(len(final), 4)]\n\t\t\t\t\treorder = reorder + Result.NEW_LINE\n\t\t\t\tchild.set('message', reorder)\n\t\t\t\tchild.set('text', sub[1].text)\n\t\t\telse:\n\t\t\t\tchild.set('status', 'passed')\n\t\t\t\tchild.set('message', '')\n\t\t\t\tchild.set('text', '')\n\n\ndef main(argv):\n\t"""Script runner."""\n\tpath = './'\n\tfile_name = 'result.xml'\n\tserver = ''\n\t# Process arguments\n\ttry:\n\t\toptions, arguments = getopt.getopt(\n\t\t\targv,\n\t\t\t'hi:u:',\n\t\t\t['help', 'input=', 'url=']\n\t\t)\n\texcept getopt.GetoptError:\n\t\tprint('test_result.py -i <input file> -u <url>')\n\t\tsys.exit(2)\n\tfor option, argument in options:\n\t\tif option in ('-h', '--help'):\n\t\t\tprint('test_result.py -i <input file> -u <url>')\n\t\t\tsys.exit()\n\t\telif option in ('-i', '--input'):\n\t\t\tpath, file_name = os.path.split(argument)\n\t\telif option in ('-u', '--url'):\n\t\t\tserver = argument\n\tprint('Break up the XML file')\n\trunner = Result(path=path, data=file_name, url=server)\n\tprint(\n\t\t'Results:',\n\t\tElementTree.tostring(runner.root, encoding='utf8', method='xml')\n\t)\n\tprint('Process the tests')\n\trunner.retrieve_test_results()\n\tprint('Build the data results for load')\n\tresults = []\n\tfor child in runner.root:\n\t\tif 'status' not in child.attrib:\n\t\t\tchild.set('status', 'skipped')\n\t\tif child.get('status') != 'skipped':\n\t\t\tif 'test' in child.attrib and child.get('test') != -1:\n\t\t\t\tresults.append({\n\t\t\t\t\t'test_id': child.get('test'),\n\t\t\t\t\t'status_id': runner.get_status(child.get('status')),\n\t\t\t\t\t'comment': child.get('message'),\n\t\t\t\t\t'version': '',\n\t\t\t\t\t'elapsed': runner.get_time_string(child.get('time')),\n\t\t\t\t\t'defects': '',\n\t\t\t\t\t'assignedto_id': '',\n\t\t\t\t})\n\tif len(results) < 2:\n\t\tresults = [results]\n\tpackage = runner.test_rail.add_results(\n\t\trun_id=int(runner.run_id),\n\t\tdata={'results': results}\n\t)\n\tprint(package)\n\n\nif __name__ == '__main__':\n\t# execute when run as a script\n\tmain(sys.argv[1:])\n